{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\Workspace\\\\client\\\\src\\\\components\\\\Notification.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport '../scss/components/Notification.css';\nimport Notificationcard from './Card/Notificationcard';\nimport { useDispatch } from 'react-redux';\nimport { getAllNotificationsAsync } from '../redux/Slices/NotificationSlice';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notification = _ref => {\n  _s();\n\n  let {\n    socket\n  } = _ref;\n  const [isDisplay, setIsDisplay] = React.useState(false);\n  const dispatch = useDispatch();\n  const [notifications, setNotifications] = React.useState([]);\n\n  const handleNotification = () => {\n    setIsDisplay(!isDisplay);\n  };\n\n  useEffect(() => {\n    dispatch(getAllNotificationsAsync()).then(res => {\n      const allNotifsfromAPI = res.payload.data.data.notifications;\n      let allNotifs = [];\n      allNotifsfromAPI.forEach(element => {\n        allNotifs.push({\n          sender: element.sender.name,\n          senderId: element.sender._id,\n          receivers: element.receivers,\n          content: element.content,\n          isMessage: element.isMessage,\n          receiverChat: element.receiverChat,\n          Seen: element.Seen\n        });\n      });\n      setNotifications(allNotifs);\n    });\n  }, [1]);\n  useEffect(() => {\n    let tempNotifs = [...notifications];\n    socket.on(\"receive_notification\", data => {\n      const index = tempNotifs.findIndex(notif => notif.senderId === data.senderId);\n\n      if (index >= 0) {\n        tempNotifs[index].content = data.content;\n        setNotifications(tempNotifs);\n      } else {\n        setNotifications(prev => [data, ...prev]);\n      }\n    });\n  }, [socket, notifications]);\n  const listNotifications = notifications === null || notifications === void 0 ? void 0 : notifications.map(notification => {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/Message_ChatWindow/${notification.receiverChat}`,\n      style: {\n        textDecoration: 'none',\n        color: 'black'\n      },\n      children: /*#__PURE__*/_jsxDEV(Notificationcard, {\n        name: notification.sender,\n        date: \"2021-06-01\",\n        content: notification.content,\n        chatId: notification.receiverChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-bell\",\n      onClick: handleNotification,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-circle\",\n        children: \"4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa-solid fa-bell fa-xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-list\",\n      children: listNotifications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notification, \"ajtwbtODWZy122BIWQeHqJCQyFk=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Notification;\nexport default Notification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"names":["React","useEffect","useSelector","Notificationcard","useDispatch","getAllNotificationsAsync","Link","Notification","socket","isDisplay","setIsDisplay","useState","dispatch","notifications","setNotifications","handleNotification","then","res","allNotifsfromAPI","payload","data","allNotifs","forEach","element","push","sender","name","senderId","_id","receivers","content","isMessage","receiverChat","Seen","tempNotifs","on","index","findIndex","notif","prev","listNotifications","map","notification","textDecoration","color"],"sources":["C:/Users/admin/Documents/Workspace/client/src/components/Notification.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport '../scss/components/Notification.css'\r\nimport Notificationcard from './Card/Notificationcard'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getAllNotificationsAsync } from '../redux/Slices/NotificationSlice'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Notification = ({ socket }) => {\r\n  const [isDisplay, setIsDisplay] = React.useState(false);\r\n  const dispatch = useDispatch();\r\n  const [notifications, setNotifications] = React.useState([]);\r\n  const handleNotification = () => {\r\n    setIsDisplay(!isDisplay);\r\n  };\r\n  useEffect(() => {\r\n    dispatch(getAllNotificationsAsync()).then((res) => {\r\n      const allNotifsfromAPI = res.payload.data.data.notifications;\r\n      let allNotifs = [];\r\n      allNotifsfromAPI.forEach((element) => {\r\n        allNotifs.push({\r\n          sender: element.sender.name,\r\n          senderId: element.sender._id,\r\n          receivers: element.receivers,\r\n          content: element.content,\r\n          isMessage: element.isMessage,\r\n          receiverChat: element.receiverChat,\r\n          Seen: element.Seen,\r\n        });\r\n      });\r\n      setNotifications(allNotifs);\r\n    });\r\n  }, [1]);\r\n  useEffect(() => {\r\n     let tempNotifs = [...notifications];\r\n    socket.on(\"receive_notification\", (data) => {\r\n      const index = tempNotifs.findIndex((notif) => notif.senderId === data.senderId);\r\n      if (index >= 0) {\r\n        tempNotifs[index].content = data.content;\r\n        setNotifications(tempNotifs);\r\n      } else {\r\n         setNotifications((prev) => [data, ...prev]);\r\n      }\r\n    });\r\n    \r\n  }, [socket, notifications]);\r\n  const listNotifications = notifications?.map((notification) => {\r\n    return (\r\n      <Link to={`/Message_ChatWindow/${notification.receiverChat}`} style={{ textDecoration: 'none', color: 'black' }}>\r\n      <Notificationcard name={notification.sender} date={\"2021-06-01\"} content={notification.content} chatId={notification.receiverChat}\r\n        />\r\n      </Link>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"notification\">\r\n      <div className=\"notification-bell\" onClick={handleNotification}>\r\n        <div className=\"notification-circle\">4</div>\r\n        <i class=\"fa-solid fa-bell fa-xl\"></i>\r\n      </div>\r\n      {isDisplay &&\r\n        <div className=\"notification-list\">\r\n            {listNotifications}\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\nexport default Notification;"],"mappings":"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"},"metadata":{},"sourceType":"module"}