{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Axios from \"axios\"; // import { timeSince } from \"../../utils/timeSince\";\n\nexport const getAllChatsAsync = createAsyncThunk(\"chats/getAllchatAsync\", async () => {\n  const data = await Axios.get(\"https://chat-web-vz9a.onrender.com/api/chat\", {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return data;\n});\nexport const getChatID = createAsyncThunk(\"chats/getChatID\", async (userID1, userID2) => {\n  const data = await Axios.get(`https://chat-web-vz9a.onrender.com/api/chat`, {\n    headers: {\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  });\n  return data;\n});\nconst ChatSlice = createSlice({\n  name: \"chats\",\n  initialState: [],\n  reducers: {\n    addLatestMessage: (state, action) => {\n      let temp = state.chats.find(chat => chat._id == action.payload.id);\n\n      if (temp) {\n        temp.latestMessage.content = action.payload.latestMessage; //temp.latestMessage.createdAt = action.payload.createdAt;\n\n        console.log();\n        temp.latestMessage.createAt = action.payload.createAt;\n        state.chats.sort(function (a, b) {\n          // Turn your strings into dates, and then subtract them\n          // to get a value that is either negative, positive, or zero.\n          return new Date(b.latestMessage.createAt) - new Date(a.latestMessage.createAt);\n        });\n      }\n\n      console.log(state.chats);\n    }\n  },\n  extraReducers: {\n    [getAllChatsAsync.fulfilled]: (state, action) => {\n      state = action.payload.data.data;\n      return action.payload.data.data;\n    }\n  }\n});\nexport const {\n  getAllChats,\n  addLatestMessage\n} = ChatSlice.actions;\nexport default ChatSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Axios","getAllChatsAsync","data","get","headers","Authorization","localStorage","getItem","getChatID","userID1","userID2","ChatSlice","name","initialState","reducers","addLatestMessage","state","action","temp","chats","find","chat","_id","payload","id","latestMessage","content","console","log","createAt","sort","a","b","Date","extraReducers","fulfilled","getAllChats","actions","reducer"],"sources":["D:/WEB CODE LIB/chat-turbo/socket-client/src/redux/Slices/ChatSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Axios from \"axios\";\r\n// import { timeSince } from \"../../utils/timeSince\";\r\nexport const getAllChatsAsync = createAsyncThunk(\r\n  \"chats/getAllchatAsync\",\r\n  async () => {\r\n    const data = await Axios.get(\"https://chat-web-vz9a.onrender.com/api/chat\", {\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n    });\r\n    return data;\r\n  }\r\n  );\r\n  export const getChatID = createAsyncThunk(\r\n    \"chats/getChatID\",\r\n    async (userID1, userID2) => {\r\n        const data = await Axios.get(`https://chat-web-vz9a.onrender.com/api/chat`,{\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n            },\r\n          }\r\n        );\r\n        return data;\r\n      } \r\n  );\r\n  const ChatSlice = createSlice({\r\n    name: \"chats\",\r\n  initialState: [],\r\n    reducers: {\r\n      addLatestMessage: (state, action) => {\r\n        let temp = state.chats.find((chat) => chat._id == action.payload.id);\r\n        if (temp) {\r\n          temp.latestMessage.content = action.payload.latestMessage;\r\n          //temp.latestMessage.createdAt = action.payload.createdAt;\r\n          console.log()\r\n          temp.latestMessage.createAt = action.payload.createAt;\r\n          state.chats.sort(function (a, b) {\r\n            // Turn your strings into dates, and then subtract them\r\n            // to get a value that is either negative, positive, or zero.\r\n            return (\r\n              new Date(b.latestMessage.createAt) -\r\n              new Date(a.latestMessage.createAt)\r\n            );\r\n          });\r\n        }\r\n        console.log(state.chats);\r\n      }\r\n      \r\n    },\r\n  extraReducers: {\r\n    [getAllChatsAsync.fulfilled]: (state, action) => {\r\n      state = action.payload.data.data;\r\n       return action.payload.data.data;\r\n    },  \r\n  },\r\n});\r\nexport const { getAllChats, addLatestMessage } = ChatSlice.actions;\r\nexport default ChatSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAO,MAAMC,gBAAgB,GAAGF,gBAAgB,CAC9C,uBAD8C,EAE9C,YAAY;EACV,MAAMG,IAAI,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,6CAAV,EAAyD;IAC1EC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;IADhD;EADiE,CAAzD,CAAnB;EAKA,OAAOL,IAAP;AACD,CAT6C,CAAzC;AAWL,OAAO,MAAMM,SAAS,GAAGT,gBAAgB,CACvC,iBADuC,EAEvC,OAAOU,OAAP,EAAgBC,OAAhB,KAA4B;EACxB,MAAMR,IAAI,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAW,6CAAX,EAAwD;IACvEC,OAAO,EAAE;MACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;IADhD;EAD8D,CAAxD,CAAnB;EAMA,OAAOL,IAAP;AACD,CAVoC,CAAlC;AAYP,MAAMS,SAAS,GAAGb,WAAW,CAAC;EAC5Bc,IAAI,EAAE,OADsB;EAE9BC,YAAY,EAAE,EAFgB;EAG5BC,QAAQ,EAAE;IACRC,gBAAgB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACnC,IAAIC,IAAI,GAAGF,KAAK,CAACG,KAAN,CAAYC,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,GAAL,IAAYL,MAAM,CAACM,OAAP,CAAeC,EAAtD,CAAX;;MACA,IAAIN,IAAJ,EAAU;QACRA,IAAI,CAACO,aAAL,CAAmBC,OAAnB,GAA6BT,MAAM,CAACM,OAAP,CAAeE,aAA5C,CADQ,CAER;;QACAE,OAAO,CAACC,GAAR;QACAV,IAAI,CAACO,aAAL,CAAmBI,QAAnB,GAA8BZ,MAAM,CAACM,OAAP,CAAeM,QAA7C;QACAb,KAAK,CAACG,KAAN,CAAYW,IAAZ,CAAiB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;UAC/B;UACA;UACA,OACE,IAAIC,IAAJ,CAASD,CAAC,CAACP,aAAF,CAAgBI,QAAzB,IACA,IAAII,IAAJ,CAASF,CAAC,CAACN,aAAF,CAAgBI,QAAzB,CAFF;QAID,CAPD;MAQD;;MACDF,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACG,KAAlB;IACD;EAlBO,CAHkB;EAwB9Be,aAAa,EAAE;IACb,CAACjC,gBAAgB,CAACkC,SAAlB,GAA8B,CAACnB,KAAD,EAAQC,MAAR,KAAmB;MAC/CD,KAAK,GAAGC,MAAM,CAACM,OAAP,CAAerB,IAAf,CAAoBA,IAA5B;MACC,OAAOe,MAAM,CAACM,OAAP,CAAerB,IAAf,CAAoBA,IAA3B;IACF;EAJY;AAxBe,CAAD,CAA7B;AA+BF,OAAO,MAAM;EAAEkC,WAAF;EAAerB;AAAf,IAAoCJ,SAAS,CAAC0B,OAApD;AACP,eAAe1B,SAAS,CAAC2B,OAAzB"},"metadata":{},"sourceType":"module"}